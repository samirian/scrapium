{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selenium Scraper This project is mainly a base class that contains helper functions that I found my self using most when I perform webscraping on almost anywebsite and is repeating over and over, also It runs as separate process so that you can run multiple objects and makes your scraping much more faster and reliable.","title":"Home"},{"location":"#selenium-scraper","text":"This project is mainly a base class that contains helper functions that I found my self using most when I perform webscraping on almost anywebsite and is repeating over and over, also It runs as separate process so that you can run multiple objects and makes your scraping much more faster and reliable.","title":"Selenium Scraper"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"documentation/","text":"Selenium_Scraper class Selenium_Scraper() open_url(url: str, trials: int = 1) -> bool Loads a page of a given url. url : The url to be loaded. trials : The maximum number of trials before the fucntion raise TimeoutException . set_page_load_timeout(timeout: int) Sets the timeout of page loading. timeout : The maximum duration in seconds that the driver must wait when loading a page before it raise TimeoutException . set_wait_timeout(timeout: int) Sets the timeout of waiting for element to be visible. timeout : The maximum duration in seconds that the driver wait must wait before it raise TimeoutException . set_proxy(ip: str, port: str) Sets a proxy for the driver. ip : The ip of the proxy server. port : The port of the proxy server. set_default_download_directory(directory: str) Sets the default download directory so that when a link is opened, it is downloaded in the default directory automatically. directory : The default download directory. wait_for_element_visibility(xpath: str) Waits for element indicated by the given xpath to be cisible for the previously set wait timeout, if not set its default value is 10 secs. xpath : The xpath of the element to wait for its visibility. click_element_by_xpath(xpath: str) Directly clicks the element given by the xpath. xpath : The xpath of the element to be clicked. click_element_by_xpath_using_actions(xpath: str) Moves to the element position then clicks it, this is espicially useful when there is other element appearing on the screen (blocking the element we want to click from being directly clicked means that the click will be intercepted by the blocking element). xpath : The xpath of the element to be clicked. get_text_from_element_by_xpath(xpath: str) Gets the text from an element given by the xpath. xpath : The xpath of the element to get text from. clear_element_text(xpath: str) Clear element given by xpath from it text, this is espicially useful when trying to clear text from input element and then insert other text to it. xpath : The xpath of the element to clear its text. send_keys_to_element(xpath: str, keys: str) Inserts the text given by the keys to an element given by the xpath. xpath : The xpath of the element to insert text to. send_keys_using_actions(xpath: str, keys: str) Inserts the text given by the keys to an element given by the xpath, this is espicially useful when there is other element appearing on the screen (blocking the element we want to send text to from directly recieving that text means that the text sent will be intercepted by the blocking element). xpath : The xpath of the element to insert text to. get_csv_file_reader(filename: str) -> csv.DictReader Opens the csv file and gets csv file reader. filename : The name of the csv file to be opened. get_csv_file_writer(filename: str, fieldnames: list, previlage: str) -> (csv.DictWriter, open) Open the csv file with the specified privillage and writes the header with the given fieldnames then returns csv file writer and the csv file. filename : The csv filename. fieldnames : The field names (names of the coulmns in the csv file). previlage : The file previlage ('w' for creating new file, and 'a' for appending to an existing file). run() Contains the main code that will run in a separate process. execute(*args) This function should be overriden to pass custom arguments to the run function and also to set up the options. args : A list containing all the arguments passed to the function.","title":"Api documentation"},{"location":"documentation/#selenium_scraper","text":"class Selenium_Scraper() open_url(url: str, trials: int = 1) -> bool Loads a page of a given url. url : The url to be loaded. trials : The maximum number of trials before the fucntion raise TimeoutException . set_page_load_timeout(timeout: int) Sets the timeout of page loading. timeout : The maximum duration in seconds that the driver must wait when loading a page before it raise TimeoutException . set_wait_timeout(timeout: int) Sets the timeout of waiting for element to be visible. timeout : The maximum duration in seconds that the driver wait must wait before it raise TimeoutException . set_proxy(ip: str, port: str) Sets a proxy for the driver. ip : The ip of the proxy server. port : The port of the proxy server. set_default_download_directory(directory: str) Sets the default download directory so that when a link is opened, it is downloaded in the default directory automatically. directory : The default download directory. wait_for_element_visibility(xpath: str) Waits for element indicated by the given xpath to be cisible for the previously set wait timeout, if not set its default value is 10 secs. xpath : The xpath of the element to wait for its visibility. click_element_by_xpath(xpath: str) Directly clicks the element given by the xpath. xpath : The xpath of the element to be clicked. click_element_by_xpath_using_actions(xpath: str) Moves to the element position then clicks it, this is espicially useful when there is other element appearing on the screen (blocking the element we want to click from being directly clicked means that the click will be intercepted by the blocking element). xpath : The xpath of the element to be clicked. get_text_from_element_by_xpath(xpath: str) Gets the text from an element given by the xpath. xpath : The xpath of the element to get text from. clear_element_text(xpath: str) Clear element given by xpath from it text, this is espicially useful when trying to clear text from input element and then insert other text to it. xpath : The xpath of the element to clear its text. send_keys_to_element(xpath: str, keys: str) Inserts the text given by the keys to an element given by the xpath. xpath : The xpath of the element to insert text to. send_keys_using_actions(xpath: str, keys: str) Inserts the text given by the keys to an element given by the xpath, this is espicially useful when there is other element appearing on the screen (blocking the element we want to send text to from directly recieving that text means that the text sent will be intercepted by the blocking element). xpath : The xpath of the element to insert text to. get_csv_file_reader(filename: str) -> csv.DictReader Opens the csv file and gets csv file reader. filename : The name of the csv file to be opened. get_csv_file_writer(filename: str, fieldnames: list, previlage: str) -> (csv.DictWriter, open) Open the csv file with the specified privillage and writes the header with the given fieldnames then returns csv file writer and the csv file. filename : The csv filename. fieldnames : The field names (names of the coulmns in the csv file). previlage : The file previlage ('w' for creating new file, and 'a' for appending to an existing file). run() Contains the main code that will run in a separate process. execute(*args) This function should be overriden to pass custom arguments to the run function and also to set up the options. args : A list containing all the arguments passed to the function.","title":"Selenium_Scraper"}]}